// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: report.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createSafetyReport = `-- name: CreateSafetyReport :one
INSERT INTO safety_reports (
  reporter_user_id, location, latitude, longitude, safety_level, tags, description
) VALUES (
  $1, ST_SetSRID(ST_MakePoint($3, $2), 4326), $2, $3, $4, $5, $6
) RETURNING id, reporter_user_id, location, latitude, longitude, safety_level, description, tags, confirmations_count, created_at
`

type CreateSafetyReportParams struct {
	ReporterUserID uuid.UUID `json:"reporter_user_id"`
	Latitude       float64   `json:"latitude"`
	Longitude      float64   `json:"longitude"`
	SafetyLevel    string    `json:"safety_level"`
	Tags           []string  `json:"tags"`
	Description    *string   `json:"description"`
}

func (q *Queries) CreateSafetyReport(ctx context.Context, arg CreateSafetyReportParams) (SafetyReport, error) {
	row := q.db.QueryRow(ctx, createSafetyReport,
		arg.ReporterUserID,
		arg.Latitude,
		arg.Longitude,
		arg.SafetyLevel,
		arg.Tags,
		arg.Description,
	)
	var i SafetyReport
	err := row.Scan(
		&i.ID,
		&i.ReporterUserID,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.SafetyLevel,
		&i.Description,
		&i.Tags,
		&i.ConfirmationsCount,
		&i.CreatedAt,
	)
	return i, err
}

const findReportsInBounds = `-- name: FindReportsInBounds :many
SELECT id, reporter_user_id, location, latitude, longitude, safety_level, description, tags, confirmations_count, created_at FROM safety_reports
WHERE
  location && ST_MakeEnvelope($1::float8, $2::float8, $3::float8, $4::float8, 4326)
ORDER BY created_at DESC
`

type FindReportsInBoundsParams struct {
	West  float64 `json:"west"`
	South float64 `json:"south"`
	East  float64 `json:"east"`
	North float64 `json:"north"`
}

func (q *Queries) FindReportsInBounds(ctx context.Context, arg FindReportsInBoundsParams) ([]SafetyReport, error) {
	rows, err := q.db.Query(ctx, findReportsInBounds,
		arg.West,
		arg.South,
		arg.East,
		arg.North,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SafetyReport
	for rows.Next() {
		var i SafetyReport
		if err := rows.Scan(
			&i.ID,
			&i.ReporterUserID,
			&i.Location,
			&i.Latitude,
			&i.Longitude,
			&i.SafetyLevel,
			&i.Description,
			&i.Tags,
			&i.ConfirmationsCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
